# -*- coding: utf-8 -*-
import math
from email.mime import image

import numpy as np
import self as self
# Form implementation generated from reading ui file '/Users/weam/Desktop/filtersDesigner.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage, QPixmap, QColor
from PyQt5.QtWidgets import QFileDialog, QGraphicsScene, QGraphicsPixmapItem, QErrorMessage, QMainWindow
from PIL import Image, ImageFilter

import image_filters
from histogramDesign import Ui_histogramDesign
from image_filters import apply_netlestirme_filter
from perspectiveDesign import Ui_perspectiveDesign


class Ui_MainWindow(object):
    def openPerspective(self):

        self.window = QMainWindow()
        self.ui = Ui_perspectiveDesign()
        self.ui.setupUi(self.window)  # Line causing the error
        self.ui.retranslateUi(self.window)  # Add this line
        self.window.show()

    def openHistogram(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_histogramDesign()
        self.ui.setupUi(self.window)
        self.window.show()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1350, 760)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.scrollRed = QtWidgets.QScrollBar(self.centralwidget)
        self.scrollRed.setGeometry(QtCore.QRect(1150, 310, 131, 16))
        self.scrollRed.setOrientation(QtCore.Qt.Horizontal)
        self.scrollRed.setObjectName("scrollRed")
        self.scrollRed.setMinimum(-255)
        self.scrollRed.setMaximum(255)
        self.scrollRed.setValue(0)
        self.scrollRed.valueChanged.connect(self.update_lblRed)
        self.scrollRed.valueChanged.connect(self.apply_red_filter)


        self.scrollGreen = QtWidgets.QScrollBar(self.centralwidget)
        self.scrollGreen.setGeometry(QtCore.QRect(1150, 340, 131, 16))
        self.scrollGreen.setOrientation(QtCore.Qt.Horizontal)
        self.scrollGreen.setObjectName("scrollGreen")
        self.scrollGreen.setMinimum(-225)
        self.scrollGreen.setMaximum(255)
        self.scrollGreen.setValue(0)
        self.scrollGreen.valueChanged.connect(self.update_lblGreen)
        self.scrollGreen.valueChanged.connect(self.apply_green_filter)

        self.scrollBlue = QtWidgets.QScrollBar(self.centralwidget)
        self.scrollBlue.setGeometry(QtCore.QRect(1150, 370, 131, 16))
        self.scrollBlue.setOrientation(QtCore.Qt.Horizontal)
        self.scrollBlue.setObjectName("scrollBlue")
        self.scrollBlue.setMinimum(-255)
        self.scrollBlue.setMaximum(255)
        self.scrollGreen.setValue(0)
        self.scrollBlue.valueChanged.connect(self.update_lblBlue)
        self.scrollBlue.valueChanged.connect(self.apply_blue_filter)

        self.scrollParlaklik = QtWidgets.QScrollBar(self.centralwidget)
        self.scrollParlaklik.setGeometry(QtCore.QRect(1150, 460, 131, 16))
        self.scrollParlaklik.setOrientation(QtCore.Qt.Horizontal)
        self.scrollParlaklik.setObjectName("scrollParlaklik")
        self.scrollParlaklik.setMinimum(-255)
        self.scrollParlaklik.setMaximum(255)
        self.scrollParlaklik.valueChanged.connect(self.update_lblParlaklik)
        self.scrollParlaklik.valueChanged.connect(self.apply_parlaklik_filter)

        self.spinBoxOrtalama = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBoxOrtalama.setGeometry(QtCore.QRect(1200, 240, 42, 22))
        self.spinBoxOrtalama.setObjectName("spinBoxOrtalama")
        self.spinBoxOrtalama.setMinimum(0)
        self.spinBoxOrtalama.setMaximum(30)
        self.spinBoxOrtalama.setValue(3)
        self.spinBoxOrtalama.valueChanged.connect(self.apply_red_filter)


        self.scrollEsikleme = QtWidgets.QScrollBar(self.centralwidget)
        self.scrollEsikleme.setGeometry(QtCore.QRect(1150, 490, 131, 16))
        self.scrollEsikleme.setOrientation(QtCore.Qt.Horizontal)
        self.scrollEsikleme.setObjectName("scrollEsikleme")
        self.scrollEsikleme.setMinimum(-255)
        self.scrollEsikleme.setMaximum(255)
        self.scrollEsikleme.valueChanged.connect(self.update_lblEsikleme)
        self.scrollEsikleme.valueChanged.connect(self.apply_esikleme_filter)

        self.scrollDondurme = QtWidgets.QScrollBar(self.centralwidget)
        self.scrollDondurme.setGeometry(QtCore.QRect(1150, 140, 131, 16))
        self.scrollDondurme.setOrientation(QtCore.Qt.Horizontal)
        self.scrollDondurme.setObjectName("scrollDondurme")
        self.scrollDondurme.setMinimum(0)
        self.scrollDondurme.setMaximum(360)
        self.scrollDondurme.valueChanged.connect(self.update_lblDondurme)
        self.scrollDondurme.valueChanged.connect(self.on_scrollDondurme_ValueChanged)

        self.scrollContrast = QtWidgets.QScrollBar(self.centralwidget)
        self.scrollContrast.setGeometry(QtCore.QRect(1150, 430, 131, 16))
        self.scrollContrast.setOrientation(QtCore.Qt.Horizontal)
        self.scrollContrast.setObjectName("scrollContrast")
        self.scrollContrast.setMinimum(-255)
        self.scrollContrast.setMaximum(255)
        self.scrollContrast.valueChanged.connect(self.update_lblContrast)
        self.scrollContrast.valueChanged.connect(self.apply_contrast_filter)

        self.btnPrespective = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.openPerspective())
        self.btnPrespective.setGeometry(QtCore.QRect(960, 650, 110, 32))
        self.btnPrespective.setObjectName("btnPrespective")

        self.btnHistogram = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.openHistogram())
        self.btnHistogram.setGeometry(QtCore.QRect(960, 610, 110, 32))
        self.btnHistogram.setObjectName("btnHistogram")

        self.btnNetlestirme = QtWidgets.QPushButton(self.centralwidget)
        self.btnNetlestirme.setGeometry(QtCore.QRect(250, 610, 110, 32))
        self.btnNetlestirme.setObjectName("btnNetlestirme")

        self.btnAynalama = QtWidgets.QPushButton(self.centralwidget)
        self.btnAynalama.setGeometry(QtCore.QRect(810, 610, 110, 32))
        self.btnAynalama.setObjectName("btnAynalama")

        self.btnYayma = QtWidgets.QPushButton(self.centralwidget)
        self.btnYayma.setGeometry(QtCore.QRect(1110, 630, 110, 32))
        self.btnYayma.setObjectName("btnAynalama")

        self.btnUzaklastirma = QtWidgets.QPushButton(self.centralwidget)
        self.btnUzaklastirma.setGeometry(QtCore.QRect(670, 650, 110, 32))
        self.btnUzaklastirma.setObjectName("btnUzaklastirma")
        self.btnTers = QtWidgets.QPushButton(self.centralwidget)
        self.btnTers.setGeometry(QtCore.QRect(670, 610, 110, 32))
        self.btnTers.setObjectName("btnTers")
        self.btnMedian = QtWidgets.QPushButton(self.centralwidget)
        self.btnMedian.setGeometry(QtCore.QRect(110, 650, 110, 32))
        self.btnMedian.setObjectName("btnMedian")
        self.btnUpload = QtWidgets.QPushButton(self.centralwidget)
        self.btnUpload.setGeometry(QtCore.QRect(760, 540, 110, 32))
        self.btnUpload.setObjectName("btnUpload")

        self.btnOrtalama = QtWidgets.QPushButton(self.centralwidget)
        self.btnOrtalama.setGeometry(QtCore.QRect(1170, 200, 110, 32))
        self.btnOrtalama.setObjectName("btnOrtalama")
        self.btnGauss = QtWidgets.QPushButton(self.centralwidget)
        self.btnGauss.setGeometry(QtCore.QRect(390, 610, 110, 32))
        self.btnGauss.setObjectName("btnGauss")

        self.btnOteleme = QtWidgets.QPushButton(self.centralwidget)
        self.btnOteleme.setGeometry(QtCore.QRect(810, 650, 110, 32))
        self.btnOteleme.setObjectName("btnOteleme")
        self.btnLaplace = QtWidgets.QPushButton(self.centralwidget)
        self.btnLaplace.setGeometry(QtCore.QRect(390, 650, 110, 32))
        self.btnLaplace.setObjectName("btnLaplace")
        self.btnSobel = QtWidgets.QPushButton(self.centralwidget)
        self.btnSobel.setGeometry(QtCore.QRect(530, 650, 110, 32))
        self.btnSobel.setObjectName("btnSobel")
        self.btnSave = QtWidgets.QPushButton(self.centralwidget)
        self.btnSave.setGeometry(QtCore.QRect(240, 540, 110, 32))
        self.btnSave.setObjectName("btnSave")
        self.btnPrewitt = QtWidgets.QPushButton(self.centralwidget)
        self.btnPrewitt.setGeometry(QtCore.QRect(250, 650, 110, 32))
        self.btnPrewitt.setObjectName("btnPrewitt")
        self.btnGray = QtWidgets.QPushButton(self.centralwidget)
        self.btnGray.setGeometry(QtCore.QRect(110, 610, 110, 32))
        self.btnGray.setObjectName("btnGray")
        self.btnNegative = QtWidgets.QPushButton(self.centralwidget)
        self.btnNegative.setGeometry(QtCore.QRect(530, 610, 110, 32))
        self.btnNegative.setObjectName("btnNegative")

        self.btnDondurme = QtWidgets.QPushButton(self.centralwidget)
        self.btnDondurme.setGeometry(QtCore.QRect(1170, 100, 110, 32))
        self.btnDondurme.setObjectName("btnDondurme")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(1090, 310, 31, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(1090, 340, 58, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(1090, 370, 58, 16))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(1090, 430, 58, 16))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(1090, 460, 58, 16))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(1090, 490, 61, 16))
        self.label_6.setObjectName("label_6")
        self.lblBlue = QtWidgets.QLabel(self.centralwidget)
        self.lblBlue.setGeometry(QtCore.QRect(1290, 370, 31, 16))
        self.lblBlue.setObjectName("lblBlue")
        self.lblGreen = QtWidgets.QLabel(self.centralwidget)
        self.lblGreen.setGeometry(QtCore.QRect(1290, 340, 31, 16))
        self.lblGreen.setObjectName("lblGreen")
        self.lblRed = QtWidgets.QLabel(self.centralwidget)
        self.lblRed.setGeometry(QtCore.QRect(1290, 310, 31, 16))
        self.lblRed.setObjectName("lblRed")
        self.lblParlaklik = QtWidgets.QLabel(self.centralwidget)
        self.lblParlaklik.setGeometry(QtCore.QRect(1290, 460, 31, 16))
        self.lblParlaklik.setObjectName("lblParlaklik")
        self.lblEsikleme = QtWidgets.QLabel(self.centralwidget)
        self.lblEsikleme.setGeometry(QtCore.QRect(1290, 490, 31, 16))
        self.lblEsikleme.setObjectName("lblEsikleme")
        self.lblContrast = QtWidgets.QLabel(self.centralwidget)
        self.lblContrast.setGeometry(QtCore.QRect(1290, 430, 31, 16))
        self.lblContrast.setObjectName("lblContrast")
        self.lblOrtalama = QtWidgets.QLabel(self.centralwidget)
        self.lblOrtalama.setGeometry(QtCore.QRect(1290, 240, 31, 16))
        self.lblOrtalama.setObjectName("lblOrtalama")
        self.lblDondurme = QtWidgets.QLabel(self.centralwidget)
        self.lblDondurme.setGeometry(QtCore.QRect(1290, 140, 31, 16))
        self.lblDondurme.setObjectName("lblDondurme")
        self.lblimg2 = QtWidgets.QLabel(self.centralwidget)
        self.lblimg2.setGeometry(QtCore.QRect(50, 10, 481, 501))
        self.lblimg2.setObjectName("lblimg2")
        self.lblimg2.setScaledContents(True)
        self.lblimg1 = QtWidgets.QLabel(self.centralwidget)
        self.lblimg1.setGeometry(QtCore.QRect(580, 10, 471, 501))
        self.lblimg1.setObjectName("lblimg1")
        self.lblimg1.setScaledContents(True)
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(580, -10, 491, 541))
        self.graphicsView.setInteractive(False)
        self.graphicsView.setObjectName("graphicsView")
        self.graphicsView_2 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_2.setGeometry(QtCore.QRect(60, 0, 491, 531))
        self.graphicsView.setInteractive(False)
        self.graphicsView_2.setObjectName("graphicsView_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1350, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)

    def update_lblDondurme(self, value):
        self.lblDondurme.setText(str(value))

    def update_lblParlaklik(self, value):
        self.lblParlaklik.setText(str(value))

    def update_lblEsikleme(self, value):
        self.lblEsikleme.setText(str(value))

    def update_lblContrast(self, value):
        self.lblContrast.setText(str(value))

    def update_lblOrtalama(self, value):
        self.lblOrtalama.setText(str(value))

    def update_lblBlue(self, value):
        self.lblBlue.setText(str(value))

    def update_lblGreen(self, value):
        self.lblGreen.setText(str(value))

    def update_lblRed(self, value):
        self.lblRed.setText(str(value))

    def on_scrollDondurme_ValueChanged(self):
        angle_value = self.scrollDondurme.value()  # Get the angle value
        self.apply_dondurme(angle_value)

    def update_filter_size(self, value):
        self.spinBoxOrtalama.valueChanged.connect(self.update_filter_size)


        QtCore.QMetaObject.connectSlotsByName(MainWindow)



    ##
    ###
    ####### filters codes ########
    ###
    ##


    def load_image(self, event):
     options = QFileDialog.Options()
     options |= QFileDialog.DontUseNativeDialog
     file_name, _ = QFileDialog.getOpenFileName(None, "Choose Image", "", "Images (*.png *.jpg *.bmp *.gif);;All Files (*)", options=options)
     file_dialog = QFileDialog()
     file_dialog.setDirectory('/Users/weam')

     if file_name:
        self.image_path = file_name
        pixmap = QtGui.QPixmap(self.image_path)

        scene = QGraphicsScene()
        item = QGraphicsPixmapItem(pixmap)

        item.setScale(min(self.graphicsView.viewport().width() / pixmap.width(),
                           self.graphicsView.viewport().height() / pixmap.height()))

        scene.addItem(item)
        self.graphicsView.setScene(scene)


    #
    ## Gray scale
    #
    def apply_gray_scale(self):
     if self.image_path:
        original_image = QImage(self.image_path)
        w = original_image.width()
        h = original_image.height()

        buffer = original_image.bits().asstring(w * h * 4)

        result = bytearray(len(buffer))
        current = 0
        pn = [0] * 256

        for p in range(0, len(buffer), 4):
            pn[buffer[p]] += 1

        for prob in range(len(pn)):
            pn[prob] /= (w * h)

        for y in range(h):
            for x in range(w):
                current = y * w * 4 + x * 4
                sum_ = 0
                for i in range(buffer[current]):
                    sum_ += pn[i]
                for c in range(3):
                    result[current + c] = int(255 * sum_)
                result[current + 3] = 255

        new_image = QImage(bytes(result), w, h, QImage.Format_RGBA8888)
        scene = QGraphicsScene()
        pixmap = QPixmap.fromImage(new_image)
        item = QGraphicsPixmapItem(pixmap)
        scene.addItem(item)
        self.graphicsView_2.setScene(scene)
        self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)

    #
    ## Guassian filter
    #
    def apply_gaussian_filter(self):
     if self.image_path:
        image = Image.open(self.image_path)

        original_image = Image.open(self.image_path).convert("RGBA")
        filtered_image = original_image.filter(ImageFilter.GaussianBlur())

        qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                        filtered_image.width, filtered_image.height, QImage.Format_RGBA8888)


        scene = QGraphicsScene()
        pixmap = QPixmap.fromImage(qimage)
        item = QGraphicsPixmapItem(pixmap)
        scene.addItem(item)
        self.graphicsView_2.setScene(scene)
        self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)

    #
    ## Median filter
    #
    def apply_median_filter(self):
     if self.image_path:

        original_image = Image.open(self.image_path).convert("RGBA")  # Convert to RGBA
        filtered_image = original_image.filter(ImageFilter.MedianFilter())

        qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                        filtered_image.width, filtered_image.height, QImage.Format_RGBA8888)

        scene = QGraphicsScene()
        pixmap = QPixmap.fromImage(qimage)
        item = QGraphicsPixmapItem(pixmap)
        scene.addItem(item)
        self.graphicsView_2.setScene(scene)
        self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)

     #
     ## Netlestirme filter
     #
    def apply_netlestirme_filter(self):
      if self.image_path:
        try:
            original_image = Image.open(self.image_path).convert("RGBA")
            filtered_image = apply_netlestirme_filter(original_image)
            qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                            filtered_image.width, filtered_image.height, QImage.Format_RGBA8888)

            scene = QGraphicsScene()
            pixmap = QPixmap.fromImage(qimage)
            item = QGraphicsPixmapItem(pixmap)
            scene.addItem(item)
            self.graphicsView_2.setScene(scene)
            self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)

        except Exception as e:
            print("Error applying netleştirme filter:", e)

    #
    ## Prewitt filter
    #
    def apply_prewitt_filter(self):
        if self.image_path:
            try:
                original_image = Image.open(self.image_path).convert("RGBA")
                filtered_image = image_filters.apply_prewitt_filter(original_image)  # Call the filter function

                qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                                filtered_image.width, filtered_image.height, QImage.Format_RGBA8888)

                scene = QGraphicsScene()
                pixmap = QPixmap.fromImage(qimage)
                item = QGraphicsPixmapItem(pixmap)
                scene.addItem(item)
                self.graphicsView_2.setScene(scene)
                self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)

            except Exception as e:
                print("Error applying Prewitt filter:", e)

    #
    ## laplace filter
    #
    def apply_laplace_filter(self):
     if self.image_path:
        original_image = Image.open(self.image_path).convert("RGBA")  # Convert to RGBA
        filtered_image = image_filters.apply_laplace_filter(original_image)

        qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                        filtered_image.width, filtered_image.height, QImage.Format_RGBA8888)

        scene = QGraphicsScene()
        pixmap = QPixmap.fromImage(qimage)
        item = QGraphicsPixmapItem(pixmap)
        scene.addItem(item)
        self.graphicsView_2.setScene(scene)
        self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)

     #
     ## negative filter
     #
    def apply_negative_filter(self):
      if self.image_path:
        original_image = Image.open(self.image_path).convert("RGBA")
        filtered_image = image_filters.apply_negative_filter(original_image)

        qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                        filtered_image.width, filtered_image.height, QImage.Format_RGBA8888)

        scene = QGraphicsScene()
        pixmap = QPixmap.fromImage(qimage)
        item = QGraphicsPixmapItem(pixmap)
        scene.addItem(item)
        self.graphicsView_2.setScene(scene)
        self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)

    #
    ## Sobel filter
    #
    def apply_sobel_filter(self):
      if self.image_path:
        original_image = Image.open(self.image_path).convert("RGBA")  # Convert to RGBA
        filtered_image = image_filters.apply_sobel_filter(original_image)

        qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                        filtered_image.width, filtered_image.height, QImage.Format_RGBA8888)

        scene = QGraphicsScene()
        pixmap = QPixmap.fromImage(qimage)
        item = QGraphicsPixmapItem(pixmap)
        scene.addItem(item)
        self.graphicsView_2.setScene(scene)
        self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)

    #
    ## ters cevirme
    #
    def apply_terscevir_filter(self):
     if self.image_path:
        original_image = Image.open(self.image_path).convert("RGBA")
        filtered_image = image_filters.apply_terscevir_filter(original_image)

        qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                        filtered_image.width, filtered_image.height, QImage.Format_RGBA8888)

        scene = QGraphicsScene()
        pixmap = QPixmap.fromImage(qimage)
        item = QGraphicsPixmapItem(pixmap)
        scene.addItem(item)
        self.graphicsView_2.setScene(scene)
        self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)

     #
     ## uzaklastirma filter
     #
    def apply_uzaklastirma_filter(self):
     if self.image_path:
        original_image = Image.open(self.image_path).convert("RGBA")
        filtered_image = image_filters.uzaklastir(original_image)

        qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                       filtered_image.width, filtered_image.height, QImage.Format_RGBA8888)

        scene = QGraphicsScene()
        pixmap = QPixmap.fromImage(qimage)
        item = QGraphicsPixmapItem(pixmap)
        scene.addItem(item)
        self.graphicsView_2.setScene(scene)
        self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)

     #
     ## Aynalama
     #
    def apply_aynalama_filter(self):
     if self.image_path:
        original_image = Image.open(self.image_path).convert("RGBA")
        filtered_image = image_filters.apply_aynalama(original_image)

        qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                       filtered_image.width, filtered_image.height, QImage.Format_RGBA8888)


        scene = QGraphicsScene()
        pixmap = QPixmap.fromImage(qimage)
        item = QGraphicsPixmapItem(pixmap)
        scene.addItem(item)
        self.graphicsView_2.setScene(scene)
        self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)

        #
        ## Oteleme filter
        #
    def apply_oteleme_filter(self):
     if self.image_path:
        original_image = Image.open(self.image_path).convert("RGBA")
        filtered_image = image_filters.apply_oteleme(original_image)

        qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                       filtered_image.width, filtered_image.height,
                       QImage.Format_RGBA8888)

        scene = QGraphicsScene()
        pixmap = QPixmap.fromImage(qimage)
        item = QGraphicsPixmapItem(pixmap)
        scene.addItem(item)
        self.graphicsView_2.setScene(scene)




        #
        ## Dondurme filter
        #

    def apply_dondurme(self, angle):
      if self.image_path:
        original_image = Image.open(self.image_path).convert("RGBA")
        filtered_image = image_filters.apply_dondurme(original_image, angle)

        qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                       filtered_image.width, filtered_image.height,
                       QImage.Format_RGBA8888)

        scene = QGraphicsScene()
        pixmap = QPixmap.fromImage(qimage)
        item = QGraphicsPixmapItem(pixmap)
        scene.addItem(item)
        self.graphicsView_2.setScene(scene)
        self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)

        #
        ## Ortalama filter
        #
    def apply_ortalama_filter(self, filter_size):
     if self.image_path:
        filter_size = self.spinBoxOrtalama.value()
        original_image = Image.open(self.image_path).convert("RGBA")
        filtered_image = image_filters.apply_average_filter(original_image, filter_size)

        qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                        filtered_image.width, filtered_image.height, QImage.Format_RGBA8888)

        scene = QGraphicsScene()
        pixmap = QPixmap.fromImage(qimage)
        item = QGraphicsPixmapItem(pixmap)
        scene.addItem(item)
        self.graphicsView_2.setScene(scene)
        self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)
        #
        ## Red filter
        #
    def apply_red_filter(self):

        if self.image_path:
           red_value = self.scrollRed.value()
           original_image = Image.open(self.image_path).convert("RGBA")
           filtered_image = image_filters.adjust_red_channel(original_image, red_value)  # Use adjust_red_channel

           qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                          filtered_image.width, filtered_image.height,
                          QImage.Format_RGBA8888)

           scene = QGraphicsScene()
           pixmap = QPixmap.fromImage(qimage)
           item = QGraphicsPixmapItem(pixmap)
           scene.addItem(item)
           self.graphicsView_2.setScene(scene)
           self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)

        #
        ## green filter
        #
    def apply_green_filter(self):
        if self.image_path:
           green_value = self.scrollGreen.value()
           original_image = Image.open(self.image_path).convert("RGBA")
           filtered_image = image_filters.adjust_green_channel(original_image, green_value)  # Use adjust_red_channel

           qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                          filtered_image.width, filtered_image.height,
                          QImage.Format_RGBA8888)

           scene = QGraphicsScene()
           pixmap = QPixmap.fromImage(qimage)
           item = QGraphicsPixmapItem(pixmap)
           scene.addItem(item)
           self.graphicsView_2.setScene(scene)
           self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)

        #
        ## blue filter
        #
    def apply_blue_filter(self):
        if self.image_path:
           blue_value = self.scrollBlue.value()
           original_image = Image.open(self.image_path).convert("RGBA")
           filtered_image = image_filters.adjust_blue_channel(original_image, blue_value)  # Use adjust_red_channel

           qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                          filtered_image.width, filtered_image.height,
                          QImage.Format_RGBA8888)

           scene = QGraphicsScene()
           pixmap = QPixmap.fromImage(qimage)
           item = QGraphicsPixmapItem(pixmap)
           scene.addItem(item)
           self.graphicsView_2.setScene(scene)
           self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)


        #
        ## contrast filter
        #
    def apply_contrast_filter(self):
        if self.image_path:
           contrast_level = self.scrollContrast.value()
           original_image = Image.open(self.image_path).convert("RGBA")
           filtered_image = image_filters.adjust_contrast(original_image, contrast_level)  # Use adjust_red_channel

           qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                          filtered_image.width, filtered_image.height,
                          QImage.Format_RGBA8888)

           scene = QGraphicsScene()
           pixmap = QPixmap.fromImage(qimage)
           item = QGraphicsPixmapItem(pixmap)
           scene.addItem(item)
           self.graphicsView_2.setScene(scene)
           self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)

        #
        ## parlaklik
        #
    def apply_parlaklik_filter(self):
        if self.image_path:
           parlaklik_level = self.scrollParlaklik.value()
           original_image = Image.open(self.image_path).convert("RGBA")
           filtered_image = image_filters.adjust_contrast(original_image, parlaklik_level)  # Use adjust_red_channel

           qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                          filtered_image.width, filtered_image.height,
                          QImage.Format_RGBA8888)

           scene = QGraphicsScene()
           pixmap = QPixmap.fromImage(qimage)
           item = QGraphicsPixmapItem(pixmap)
           scene.addItem(item)
           self.graphicsView_2.setScene(scene)
           self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)

        #
        ## esikleme filter
        #
    def apply_esikleme_filter(self):
        if self.image_path:
           esikleme_value = self.scrollEsikleme.value()
           original_image = Image.open(self.image_path).convert("RGBA")
           filtered_image = image_filters.apply_esikleme(original_image, esikleme_value)  # Use adjust_red_channel

           qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                          filtered_image.width, filtered_image.height,
                          QImage.Format_RGBA8888)

           scene = QGraphicsScene()
           pixmap = QPixmap.fromImage(qimage)
           item = QGraphicsPixmapItem(pixmap)
           scene.addItem(item)
           self.graphicsView_2.setScene(scene)
           self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)

    #
    ## Yayma filter
    #
    def apply_yayma_filter(self):
      if self.image_path:
        original_image = Image.open(self.image_path).convert("RGBA")

        structuring_element = np.array([[1] * 5 for _ in range(5)])  # Create a NumPy array
        filtered_image = image_filters.apply_yayma(original_image, structuring_element)


        qimage = QImage(filtered_image.tobytes("raw", "RGBA"),
                          filtered_image.width, filtered_image.height,
                          QImage.Format_RGBA8888)

        scene = QGraphicsScene()
        pixmap = QPixmap.fromImage(qimage)
        item = QGraphicsPixmapItem(pixmap)
        scene.addItem(item)
        self.graphicsView_2.setScene(scene)
        self.graphicsView_2.fitInView(item, QtCore.Qt.KeepAspectRatio)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        #upload image
        self.lblimg1.setText(_translate("MainWindow", "image"))
        self.btnUpload.clicked.connect(self.load_image)
        #Gray Scale
        self.btnGray.setText(_translate("MainWindow", "Gray Scale"))
        self.btnGray.clicked.connect(self.apply_gray_scale)
        # self.btnGray.clicked.connect(self.open_file_dialog_for_gray_scale)
        #Sobel filter
        self.btnSobel.setText(_translate("MainWindow", "Sobel Filter"))
        self.btnSobel.clicked.connect(self.apply_sobel_filter)
        #median
        self.btnMedian.setText(_translate("MainWindow", "Median Filter"))
        self.btnMedian.clicked.connect(self.apply_median_filter)
        #Dondurme
        self.btnDondurme.setText(_translate("MainWindow", "Döndürme"))
        self.btnDondurme.clicked.connect(self.apply_dondurme)
        #Guassian
        self.btnGauss.setText(_translate("MainWindow", "Gauss Filter"))
        self.btnGauss.clicked.connect(self.apply_gaussian_filter)
        #netlestirme
        self.btnNetlestirme.setText(_translate("MainWindow", "Netleştirme"))
        self.btnNetlestirme.clicked.connect(self.apply_netlestirme_filter)
        #prewitt
        self.btnPrewitt.setText(_translate("MainWindow", "Prewitt Filter"))
        self.btnPrewitt.clicked.connect(self.apply_prewitt_filter)
        #laplace
        self.btnLaplace.setText(_translate("MainWindow", "Laplace Filter"))
        self.btnLaplace.clicked.connect(self.apply_laplace_filter)
        #Negative
        self.btnNegative.setText(_translate("MainWindow", "Negative Filter"))
        self.btnNegative.clicked.connect(self.apply_negative_filter)
        #Ters
        self.btnTers.setText(_translate("MainWindow", "Ters Çevirme"))
        self.btnTers.clicked.connect(self.apply_terscevir_filter)
        #uzaklastirma
        self.btnUzaklastirma.setText(_translate("MainWindow", "Uzaklaştırma"))
        self.btnUzaklastirma.clicked.connect(self.apply_uzaklastirma_filter)
        #Aynalama
        self.btnAynalama.setText(_translate("MainWindow", "Aynalama"))
        self.btnAynalama.clicked.connect(self.apply_aynalama_filter)
        #Oteleme
        self.btnOteleme.setText(_translate("MainWindow", "Öteleme"))
        self.btnOteleme.clicked.connect(self.apply_oteleme_filter)
        #Ortalama
        self.btnOrtalama.setText(_translate("MainWindow", "Ortalama"))
        self.btnOrtalama.clicked.connect(self.apply_ortalama_filter)
        #Yayma
        self.btnYayma.setText(_translate("MainWindow", "Yayma"))
        self.btnYayma.clicked.connect(self.apply_yayma_filter)




        self.btnUzaklastirma.setText(_translate("MainWindow", "Uzaklaştırma"))

        self.btnUpload.setText(_translate("MainWindow", "Upload Image"))

        self.btnPrespective.setText(_translate("MainWindow", "Prescective"))
        self.btnHistogram.setText(_translate("MainWindow", "Histogram"))

        self.btnSave.setText(_translate("MainWindow", "Save Image"))

        self.btnGray.setText(_translate("MainWindow", "Gray Scale"))
        self.label.setText(_translate("MainWindow", "Red"))
        self.label_2.setText(_translate("MainWindow", "Green"))
        self.label_3.setText(_translate("MainWindow", "Blue"))
        self.label_4.setText(_translate("MainWindow", "Contrast"))
        self.label_5.setText(_translate("MainWindow", "Parlaklik"))
        self.label_6.setText(_translate("MainWindow", "Eşikleme"))
        self.lblBlue.setText(_translate("MainWindow", "0"))
        self.lblGreen.setText(_translate("MainWindow", "0"))
        self.lblRed.setText(_translate("MainWindow", "0"))
        self.lblParlaklik.setText(_translate("MainWindow", "0"))
        self.lblEsikleme.setText(_translate("MainWindow", "0"))
        self.lblContrast.setText(_translate("MainWindow", "0"))
        self.lblOrtalama.setText(_translate("MainWindow", "0"))
        self.lblDondurme.setText(_translate("MainWindow", ""))
        self.lblimg2.setText(_translate("MainWindow", ""))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

